---
title: "Overall Results"
format: html
---

## Comparative Model Accuracy

The predictions using the estimation data are summarised by selected banks, peer group and total in @tbl-cv-train-diff. The models generalised well to unseen data as we see the difference between RMSE on the training and test data is small. 

Overall, the ARIMA models were the most performant. The results for our selected banks, shown in @tbl-cv-train-diff-1, reveal a more mixed picture where ARIMA was not always the best model, however, for simplicity we will focus on ARIMA. Each bank has its own specification identified by the Auto ARIMA process.

```{r}
#| warning: false
#| label: tbl-cv-train-diff
#| tbl-cap: Comparing all model accuracy RMSE
#| tbl-subcap: 
#| - RMSE on Training and Cross Validation (Test for xgboost), data for sub-set of banks
#| - Mean RMSE for our sub-set of banks
#| - Mean RMSE by BankType
#| - Mean RMSE across all banks
source('functions.R')

cv_train_difference <- function(data, include_type = FALSE, include_bank = FALSE) {
    selected <- c("Model",".type","RMSE")
    if (include_bank) {
        selected <- c(selected, "BankName")
    }
    if (include_type) {
        selected <- c(selected, "BankType")
    }
    
    data |> mutate(.type = if_else(.type %in% c("Test", "CV"), "CV/Test", .type),
            .type = if_else(.type == "Training", "Train", .type)) |>
    dplyr::select(all_of(selected)) |>
    pivot_wider(names_from = .type, values_from = RMSE) |>
    mutate(Difference = `CV/Test` - Train)
}

model_data <- get_model_data()
all_data <- model_data$all_data
estimation_data <- model_data$estimation_data
observation_data <- model_data$observation_data

banks = unique(observation_data$BankName)
xg_results <- get_summary_validation.xgboost("model_select", banks, TRUE)
arima_results <- get_summary_validation.arima(banks, TRUE)
market_results <- get_summary_validation.market(banks, TRUE)
hier_results <- get_summary_validation.hierarchy(banks, TRUE)

selected_banks_data <- bind_rows(xg_results$tbl1, arima_results$tbl1, market_results$tbl1, hier_results$tbl1) |>
        cv_train_difference(include_type = FALSE, include_bank = TRUE) |> arrange(BankName) |> 
        relocate(BankName) 

selected_banks_data |>        
        rmarkdown::paged_table()

# selected_banks_data |> mutate(Model = ifelse(Model=="arima", "linearAR", Model)) |>
#   arrange(BankName, desc(`CV/Test`)) |>
#     ggplot(aes(x = BankName, y = `CV/Test`, fill = Model)) +
#     geom_bar(stat = "identity", position = "dodge") + coord_flip()+
#         labs(y = "CV/Test Score", x = "Bank Name", fill = "Model") +
#     ggtitle("Comparison of CV/Test Scores Across Banks and Models") + theme_bw() + theme(legend.position="top", legend.title = element_blank())+scale_fill_colorblind7()    
  
bind_rows(xg_results$tbl2, arima_results$tbl2, market_results$tbl2, hier_results$tbl2) |>
    cv_train_difference() |> rmarkdown::paged_table()

bind_rows(xg_results$tbl4, arima_results$tbl4, market_results$tbl4, hier_results$tbl4) |>
    arrange(BankType) |> 
    cv_train_difference(include_type = FALSE, include_bank = FALSE)  |>   
    rmarkdown::paged_table()

bind_rows(xg_results$tbl3, arima_results$tbl3, market_results$tbl3, hier_results$tbl3) |>
    cv_train_difference() |>  
    rmarkdown::paged_table()

```
## Conclusions

For our observation period of 6 quarters, we calculated the average effect (cumulative mean) and total effect (cumulative sum) of each case study event as shown in @sec-ab.

Ostensibly, we can say that there is an event impact if the AR is not zero. However, we face what is called the 'joint test problem' which arises because we are effectively testing two things: the counterfactual model predictions and the event impact. Consequently, we need an approach to evaluate if our predictions are credible. An approach suggested by Huntington-Klein is to test using data where we expect no effect; if there were abnormal returns this would point to an issue with the model [-@HuntingtonKlein]. We decided to predict 6 periods before each event (refitting the model with this data removed), as our pre-event test period. 

By comparing the pre and post abnormal returns, we cannot credibly assert that partnership events have had an impact as we see from the pre-event predictions that they too have abnormal returns. 


```{r}
#| warning: false
#| echo: false
#| results: hide
#| fig-keep: all
#| label: fig-pred-final-result
#| fig-cap: "Prediction vs. Observed Event"

get_prediction <- function(bankname, partner, all_data, models, type="post") {
  tryCatch({
    event_qtr <- all_data |>
                    filter(BankName == bankname,
                           !!as.name(partner) ==0) |> pull(Quarter)
    bank_model <- models |> 
                    filter(Bank == bankname,
                           Partner == partner)|> pluck("model_details",1)
    
    trained_qtr <- bank_model$Augmented |> filter(Quarter == max(Quarter)) |> pull(Quarter)

    obs_data <- all_data |> filter(BankName == bankname, Quarter > trained_qtr)  
    
    #model trained on estimation data
    forecasts <- bank_model$BankModel |>
                  forecast(new_data = obs_data, bootstrap=TRUE, times = 5000)

    final_df <- original_scale(forecasts, all_data) |> add_column(Partner = partner)
    if (type == "post") {
      final_df <- final_df |> filter(Quarter >= event_qtr & Quarter < event_qtr + 6) 
    }
    if (type == "pre") {
      final_df <- final_df |> filter(Quarter < event_qtr) |> mutate(Period = -(n() - row_number() + 1)) 
    }
    final_df

  }, error = function(e) {
    print(glue::glue("prediction error for {bankname}: {e}"))
    NULL
  })
}

partner_banks <- credit_card.partnerships.long()
arima_results <- read_arima_results() |> filter(BankName %in% unique(observation_data$BankName))

###### get prediction for Period current + 8 quarters after event###################
models_post_event <- partner_banks |> 
                      mutate(model_details = map2(Bank, Partner, best_arima_model, all_data, arima_results))

result_post <- map2(partner_banks$Bank, partner_banks$Partner, get_prediction, all_data, models_post_event) |> 
          list_rbind() |> as_tibble() |> left_join(all_data |> dplyr::select(observed = UBPRE524.Value),by = join_by(IDRSSD, BankName, BankType, Quarter))  |> dplyr::select(Partner, BankName, Quarter, observed, predicted, .model)                         
###### end get prediction for Period current + 6 quarters after event###################

#### get prediction for Period - 6 quarters before event ###################|>
models_pre_event <- partner_banks  |>
                      mutate(model_details = map2(Bank, Partner, best_arima_model, all_data, arima_results, -6))

result_pre <- map2(partner_banks$Bank, partner_banks$Partner, get_prediction, all_data, models_pre_event, type="pre") |> 
          list_rbind() |> as_tibble() |> left_join(all_data |> dplyr::select(observed = UBPRE524.Value),by = join_by(IDRSSD, BankName, BankType, Quarter))  |> dplyr::select(Partner, BankType, BankName, Quarter, observed, predicted,.model) 

#### end get prediction for Period - 8 quarters before event ###################      

map2(partner_banks$Bank, partner_banks$Partner, plot_prediction_and_history, result_post,result_pre, all_data) 

```
```{r}
#| fig-height: 8
#| eval: false
bank = "CITIBANK, N.A. (476810)"
partner = "Costco"
bank_hcast_data <- result_pre |> filter(BankName == bank) |> filter(Partner == partner) 
bank_fcast_data <- result_post |> filter(BankName == bank) |> filter(Partner == partner) 
tdsp_series <- all_data |> filter(BankName == bank) |> dplyr::select(TDSP.log.diff) |>
filter(Quarter >=min(bank_hcast_data$Quarter)-5, Quarter < max(bank_fcast_data$Quarter)+3)

p1 <-
    plot_prediction(bank, partner, bank_fcast_data, all_data) + 
    geom_line(aes(x = Quarter, y=predicted, color = "Pre"), 
              data = bank_hcast_data) +            
     scale_color_manual( 
      values = c("Pre" = "blue", "Post" = "red"),
      labels = c("Pre" = "Predictions Pre Event", "Post" = "Predictions Post Event")) +                  
    theme(legend.direction = "vertical",legend.position = "top", legend.title = element_blank())

p2 <- tdsp_series |> autoplot() + geom_line(aes(x = Quarter, y = TDSP.log.diff))  +theme_bw() 

with_econ_plot <- patchwork::wrap_elements(p1) / patchwork::wrap_elements(p2)  + plot_layout(heights = c(2,1))
with_econ_plot
```

### Abnormal Results  {#sec-ab}

#### Costco 

```{r}
#| warning: false
#| label: tbl-ar-market-costco-ar
#| tbl-cap: "AMERICAN EXPRESS (Old Partner) Abnormal Returns (original scale)"
#| tbl-subcap: 
#| - "Pre Event"
#| - "Post Event"
print_ar(result_pre, "Costco", "AMERICAN EXPRESS NATIONAL BANK (1394676)") 
print_ar(result_post, "Costco", "AMERICAN EXPRESS NATIONAL BANK (1394676)")
```

```{r}
#| warning: false
#| label: tbl-ar-market-costco-citi
#| tbl-cap: "CITIBANK (New Partner) Abnormal Returns (original scale)"
#| tbl-subcap: 
#| - "Pre Event"
#| - "Post Event"
print_ar(result_pre, "Costco", "CITIBANK, N.A. (476810)")
print_ar(result_post, "Costco", "CITIBANK, N.A. (476810)")
```

#### Walmart

```{r}
#| warning: false
#| label: tbl-ar-market-walmart-sync
#| tbl-cap: "SYNCHRONY (Old Partner) Abnormal Returns (original scale)"
#| tbl-subcap: 
#| - "Pre Event"
#| - "Post Event"
print_ar(result_pre, "Walmart", "SYNCHRONY BANK (1216022)")
print_ar(result_post, "Walmart", "SYNCHRONY BANK (1216022)")
```

```{r}
#| warning: false
#| label: tbl-ar-market-walmart-cap
#| tbl-cap: "CAPITAL ONE (New Partner) Abnormal Returns (original scale)"
#| tbl-subcap: 
#| - "Pre Event"
#| - "Post Event"
print_ar(result_pre, "Walmart", "CAPITAL ONE, NATIONAL ASSOCIATION (112837)")
print_ar(result_post, "Walmart", "CAPITAL ONE, NATIONAL ASSOCIATION (112837)")
```

#### GAP 

```{r}
#| warning: false
#| label: tbl-ar-market-gap-sync
#| tbl-cap: "SYNCHRONY (Old Partner) Abnormal Returns (original scale)"
#| tbl-subcap: 
#| - "Pre Event"
#| - "Post Event"
print_ar(result_pre, "GAP", "SYNCHRONY BANK (1216022)")
print_ar(result_post, "GAP", "SYNCHRONY BANK (1216022)")
```

```{r}
#| warning: false
#| label: tbl-ar-market-gap-bar
#| tbl-cap: "BARCLAYS BANK (New Partner) Abnormal Returns (original scale)"
#| tbl-subcap: 
#| - "Pre Event"
#| - "Post Event"
print_ar(result_pre, "GAP", "BARCLAYS BANK DELAWARE (2980209)")
print_ar(result_post, "GAP", "BARCLAYS BANK DELAWARE (2980209)")
```

