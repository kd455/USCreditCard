## Simulation Example {#simulate}

```{r}
#| echo: false
#| warning: false
source('functions.R')
```


```{r}
#| warning: false

overdue30to89 <- credit_card.overdue_3089()

known_partnerships <- credit_card.partnerships() |>
                        select(-c(available,caption)) |>
                          pmap_dfr(fe_data, overdue30to89)

known_partnerships |> View()
#structure data for fixed effect model
fe_data <- function(name, old, new, acquired, measure_data) {
  date_acquired = as.Date(acquired)
  date_from = format(date_acquired - years(1),"%Y-%m-%d")
  date_to = format(date_acquired + years(1), format("%Y-%m-%d"))

  measure_data |>
    filter(BankName %in% c(old, new)) |>
    filter_index(date_from ~ date_to) |>
    mutate(partner = case_when(
                      BankName==old & as.Date(Quarter) >= date_acquired ~ 0,
                      BankName==old & as.Date(Quarter) < date_acquired ~ 1,
                      BankName==new & as.Date(Quarter) >= date_acquired ~ 1,
                      BankName==new & as.Date(Quarter) < date_acquired ~ 0,
                      .default = 0 
                      ),
          LBankSize = case_when(
                      LargeBank == 1 ~1, 
                      LargeCreditCardBank == 1 ~ 0,
                      .default = 0
          ))
}

pdata <- pdata.frame(known_partnerships, index = c("BankName", "Quarter"))

library(plm)
fe_model <- plm(value_diff ~ partner * LBankSize, data = pdata, model = "within")

# Summary of the model
summary(fe_model)


# Extract coefficients from the model
model_coefficients <- coef(fe_model)

# Assuming your data frame 'data' has the variables used in the model
# Generate simulated data using the model's coefficients
# Here, we use a simple linear combination of predictors and coefficients for simulation
pdata |>
  mutate(simulated_value = (model_coefficients["partner"] * partner) +
                             (model_coefficients["partner:LBankSize"] * LBankSize)) |>
  ggplot(aes(x = Quarter)) +
  geom_point(aes(y = Value), color = "blue", alpha = 0.5) +
  geom_point(aes(y = simulated_value), color = "red", alpha = 0.5) +
  labs(title = "Actual vs. Simulated Revenue Over Time",
       x = "Quarter", y = "30 to 89 Days overdue % of Total Credit Cards") +
  theme_minimal() +
  scale_color_manual(values = c("Actual" = "blue", "Simulated" = "red"))

  


measure_data <- overdue30to89

acquired = "2016-04-01"
overdue30to89 <- credit_card.overdue_3089()
loan_amt <-  credit_card.loan_amount()
loan_unused <- credit_card.unused()
loan_unused_ratio <- credit_card.unused_ratio()
selected_cc <- bind_rows(overdue30to89,loan_unused,loan_unused_ratio,loan_amt)

credit_card.partnerships() |> 
  mutate(data = list(selected_cc)) |> 
  relocate(data) |>
  pwalk(partnership.plot) 

```
```{r}
#| warning: false

changepoint.data <- function(partner_details,data) {
  data |>
    filter(BankName %in% c(partner_details$old, partner_details$new)) |>
    mutate(Partnership = partner_details) |>
    as_tibble() |> 
    select(ds = Quarter, y = value_scaled, BankName, Measure,Partnership) |> 
    #mutate(cap = 70, floor = 0)
    nest(data = -c(BankName, Measure)) |>  
      mutate(m = purrr::map(data, prophet::prophet,changepoint.prior.scale=0.18)) |> 
      mutate(future = purrr::map(m, make_future_dataframe,freq = "quarter", period = 1)) |> 
      mutate(forecast = map2(m, future, predict))
}

partner_details <- credit_card.partnerships() |> 
            nest(partnership = -c(name)) |>
             mutate(changepoints = map(partnership, changepoint.data,selected_cc))


partner_details

partner_details$changepoints |> pull(1)

 |>  |> plot(m, forecast)
install.packages("cowplot") 
library(cowplot)

partner_details |> rowwise() |>
pmap(changepoint.plot)

name = partner_details[[1,1]]
partnership = partner_details[[1,2]]
changepoints = partner_details[[1,3]]

changepoint.plot(name, partnership, changepoints)

partner_details |> unnest(c(partnership,changepoints)) |> 
mutate(new_partner=(BankName==new)) |>
select(name, BankName, Measure, acquired, available,new_partner, model=m, forecast) |> 
slice(1) |> unnest(cols = model)

rowwise() |> 
pmap(changepoint.plot) 

changepoint.plot <- function(name, BankName, Measure, acquired, available, new_partner, model,forecast) {
  print(dim(unnest_legacy(model)))
  print(dim(forecast[1]))
  date_acquired = as.POSIXct(acquired, format = "%Y-%m-%d", tz = "GMT")
  plot(pull(model), forecast[[1]], plot_cap=FALSE) 
  # + # facet_wrap(~ facet, scales = "free", ncol=1)+
  #   add_changepoints_to_plot(m) +
  #     labs(title = group,
  #          subtitle = glue("Date Acquired <span style='color:#1B9E77'>{date_acquired}</span>")
  #          ) +
  #     theme(plot.subtitle = element_markdown()) +
  #     scale_x_datetime(date_breaks = "1 year", date_labels = "%Y") +
  #     geom_vline(xintercept = date_acquired, linetype=1, colour="#009E73") +
  #     geom_vline(xintercept = date_available, linetype=4)  
}


  changepoint_data |>
  filter(Partnership = partnership,
  )
  result <- result |>    
      mutate(mplt = map2(m, forecast, changepoint.plot, group=BankName, facet=Description,acquired = Acquired, available=Available)) 

  plot_grid(p1, p2, labels = c('A', 'B'), label_size = 12)

  date_acquired = as.POSIXct(acquired, format = "%Y-%m-%d", tz = "GMT")
  date_available = as.POSIXct(available, format = "%Y-%m-%d", tz = "GMT")

  plot(m, fcst, plot_cap) + facet_wrap(~ facet, scales = "free", ncol=1)+
    add_changepoints_to_plot(m) +
      labs(title = group,
           subtitle = glue("Date Acquired <span style='color:#1B9E77'>{date_acquired}</span>")) +
      theme(plot.subtitle = element_markdown()) +
      scale_x_datetime(date_breaks = "1 year", date_labels = "%Y") +
      geom_vline(xintercept = date_acquired, linetype=1, colour="#009E73") +
      geom_vline(xintercept = date_available, linetype=4)
}

changepoint.data(data=selected_cc,
partnership = "GAP",
old="SYNCHRONY BANK (1216022)", 
new="BARCLAYS BANK DELAWARE (2980209)",
acquired = "2022-05-01",
available = "2022-06-20")


result = pmap(partnerships |> select(-caption),changepoint.data)

partnerships|> select(-caption) >

changepoint.data(loan_amt)

df <- loan_amt |> 
        filter(BankName %in% c("SYNCHRONY BANK (1216022)","CAPITAL ONE, NATIONAL ASSOCIATION (112837)")) |> 
        as_tibble() |> select(ds = Quarter, y = value_scaled,BankName) |> 
        mutate(cap = 70, floor = 0)

result <- df |> nest(data = -c(BankName,Description, Partnership)) |>  
      mutate(m = purrr::map(data, prophet::prophet,changepoint.prior.scale=0.18)) |> 
      mutate(future = purrr::map(m, make_future_dataframe,freq = "quarter", period = 1)) |> 
      mutate(forecast = map2(m, future, predict)) |> 
      mutate(mplt = map2(m, forecast, myplot, group=BankName)) 

myplot <- function(m, fcst, group, plot_cap = FALSE) {
  date_acquired = as.POSIXct("2019-07-01", format = "%Y-%m-%d", tz = "GMT")
  date_available = as.Date("2019-09-24")

  plot(m, fcst, plot_cap) + 
    add_changepoints_to_plot(m) + 
      labs(title = group,
           subtitle = glue("Date Acquired <span style='color:#1B9E77'>{date_acquired}</span>")) +
      theme(plot.subtitle = element_markdown()) +
      scale_x_datetime(date_breaks = "1 year", date_labels = "%Y") +
      geom_vline(xintercept = date_acquired, linetype=1, colour="#009E73") #+
      #annotate("text", x= date_acquired, y=0, label="acquired", angle=90, hjust = 0)+
      #geom_vline(xintercept = as.numeric(date_available), linetype=4) +
      #annotate("text", x=as.numeric(date_available-10), y=0, label="available", angle=90, hjust = 0) 
}


result$mplt[[2]]   

+ add_changepoints_to_plot(result$m[[1]])

m <- prophet::prophet(df,changepoint.prior.scale=0.09)
future <- make_future_dataframe(m, freq = "quarter", periods = 1) |> mutate(cap = 70, floor = 0)
fcst <- predict(m, future)
plot(m, fcst, plot_cap = FALSE) + add_changepoints_to_plot(m)

library(fable.prophet)
df <- loan_amt |> 
        filter(BankName %in% c("SYNCHRONY BANK (1216022)"))  |>
        tsibble::fill_gaps() |>
        select(value_scaled) 
fit <- df |>
        model(
          arima = ARIMA(value_scaled),
          ets = ETS(value_scaled),
          prophet = fable.prophet::prophet(value_scaled ~ season(period = 4, order = 2,
                                          type = "multiplicative"))
        )
fc <- fit |> forecast(h = "2 years")
fc |> autoplot(df)

zero_data_firms <- overdue30to89 |>
                      features(Value,features = list(mean = mean, sd = sd, var = var, var_tiled_var)) |>
                        filter(sd == 0 | is.na(sd))       

overdue30to89 |>
  filter(!BankName %in% zero_data_firms) |>
  summarise(y.mean = mean(Value),
            y.var = var(Value)) |> 
  pivot_longer(cols = -Quarter, names_to = "name") |>
  autoplot() + facet_wrap(~ name, scales = "free_y" , ncol = 1)
  
  

```

```{r}
#| warning: false

overdue30to89_agg <- overdue30to89 |>
                      filter(!BankName %in% zero_data_firms) |>
                      summarise(y = mean(Value)) |>
                        mutate(y.log = log(y), 
                               y.log.diff = y.log - lag(y.log),
                               y.log.diff.lag1 = lag(y.log.diff,1),
                               y.log.diff.lag2 = lag(y.log.diff,2))

overdue30to89_agg |>
  pivot_longer(cols = -Quarter, names_to = "name") |>
  autoplot() + facet_wrap(~ name, scales = "free_y" , ncol = 1)

```

```{r}
#| warning: false

m.ar1 = lm(y.log.diff ~ y.log.diff.lag1, data = na.omit(overdue30to89_agg))
m.ar2 = lm(y.log.diff ~ y.log.diff.lag1 + y.log.diff.lag2, data = na.omit(overdue30to89_agg))

summary(m.ar1)
summary(m.ar2)
```


